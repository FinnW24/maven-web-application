pipeline{
    agent any
    //options{}
   // triggers{}
    tools{
        maven 'maven3.9.6'
    }
    stages{
        stage('1.CloneCode'){
            steps{
               sh "echo cloning the lates app version"
                git'https://github.com/FinnW24/maven-web-application.git'
            }
            }
stage('2.Mavenbuild'){
    steps{
        sh "echo validate,complie and perform Unittesting"
        sh "echo unit testing must pass for artifacts to be build"
        sh "mvn clean package" 
}
/*
}
stage('3.CodeQualityAnanlysis'){
    steps{
     sh "mvn sonar:sonar" 
     sh "echo codeQualityAnalysis completed"
}
}
stage('4.UploadArtifacts'){
    steps{
     sh "mvn deploy"
     sh "echo artifacts uploaded succesfully"
     sh "echo Iam now a build and release engineer"
     sh "echo build and release completed"
}
}
      stage('predeployment'){
      steps{
        sh "echo creating docker image"
        sh "docker build -t mylandmarktech/maven-web-app . "
        sh "docker push mylandmarktech/maven-web-app"
      }
    }
    stage('UnDeploy'){
      steps{
        sh "echo UNDEPLOYING existing application"
        sh "docker rm -f webapp"
      }
    }
    stage('deployment'){
      steps{
        sh "echo application ready for deployment"
        sh "docker run -d -p 8000:8080 --name webapp mylandmarktech/maven-web-app"
      }
    }
    }
    /*
    post{
        always{
            emailext body: 'Finn watangwa ', recipientProviders: [developers(), upstreamDevelopers()], subject: 'application status ', to: 'developers '
}
        success{
            emailext body: 'Finn watangwa ', recipientProviders: [developers(), upstreamDevelopers()], subject: 'application success ', to: 'developers '
}
        failure{
         emailext body: 'Finn watangwa ', recipientProviders: [developers(), upstreamDevelopers()], subject: 'application failure ', to: 'developers '
    }
    }
    */
}
